import os
import logging
import sys
import pypandoc
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from dotenv import load_dotenv
from threading import Timer
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler,
)

from gpt_score import generate_report, pdf_to_markdown_str, docx_to_markdown  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞

load_dotenv()
BOT_TOKEN = os.getenv("TG_BOT_TOKEN")

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
MAIN_KEYBOARD = [
    ["üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é"],
    ["üìù –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—é–º–µ"],
    ["üìä –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç –ø–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º"],
    ["üìÇ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∞–π–ª—ã"]
]
MARKUP = ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True)

# –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:
# context.user_data['vacancy'] = –ø—É—Ç—å –∫ PDF –≤–∞–∫–∞–Ω—Å–∏–∏
# context.user_data['files'] = —Å–ø–∏—Å–æ–∫:
#    [{"file_id":..., "file_name":..., "type":..., "file_path":...}, ...]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.\n"
        "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é (PDF, DOCX –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º),\n"
        "–∑–∞—Ç–µ–º –¥–æ–±–∞–≤—å—Ç–µ —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.\n"
        "–ù–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:",
        reply_markup=MARKUP
    )

# --- 1) Plain-text –≤—Ö–æ–¥ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ ---
async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("handle_text_input")
    expect = context.user_data.get('expect')
    logger.info(expect)
    if expect == 'vacancy':
        logger.info("handle_text_input - vacancy")
        md = update.message.text.strip()
        context.user_data['vacancy_md'] = md
        await update.message.reply_text("‚úÖ –¢–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", reply_markup=MARKUP)
        context.user_data['expect'] = None
        return
    return

# --- 2) –û–±—â–∏–π —Ç–µ–∫—Å—Ç-—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –º–µ–Ω—é ---
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    ud = context.user_data

    if text == "üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é":
        ud['expect'] = 'vacancy'
        return await update.message.reply_text(
            "üìÑ –ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é PDF, DOCX –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º.", reply_markup=MARKUP
        )

    if text == "üìù –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—é–º–µ":
        ud['expect'] = 'resume'
        return await update.message.reply_text(
            "üìù –ü—Ä–∏—à–ª–∏—Ç–µ PDF —Ä–µ–∑—é–º–µ.", reply_markup=MARKUP
        )

    if text == "üìÇ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∞–π–ª—ã":
        vacancy_exists = 'vacancy_md' in ud
        files = ud.get('files', [])
        if not vacancy_exists and not files:
            await update.message.reply_text("–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.", reply_markup=MARKUP)
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if vacancy_exists:
            lines = ud['vacancy_md'].splitlines()
            snippet = "\n".join(lines[:3])
            await update.message.reply_text(f"‚úèÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ :\n{snippet}...", reply_markup=MARKUP)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ
        resume_items = [(i,f) for i,f in enumerate(files) if f.get('type')=='resume']
        if resume_items:
            kb_res = []
            for i,f in resume_items:
                kb_res.append([
                    InlineKeyboardButton(f"üìù {f['file_name']}", callback_data=f"SHOW|{i}"),
                    InlineKeyboardButton("üóëÔ∏è", callback_data=f"DEL|{i}")
                ])
            await update.message.reply_text("–†–µ–∑—é–º–µ:", reply_markup=InlineKeyboardMarkup(kb_res))

        await update.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=MARKUP)
        return

    if text == "üìä –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç –ø–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º":
        ud = context.user_data
        # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º vacancy_md, –∏–Ω–∞—á–µ vacancy_pdf
        vacancy_md = ud.get('vacancy_md')
        if not vacancy_md:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏!", reply_markup=MARKUP)
            return

        resume_paths = [f['file_path'] for f in ud.get('files', []) if f.get('type')=='resume']
        if not resume_paths:
            await update.message.reply_text("–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ.", reply_markup=MARKUP)
            return

        await update.message.reply_text("üîé –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é‚Ä¶", reply_markup=MARKUP)
        mai_weights = {
            "jobPreferences":0.10,
            "experience":0.25,
            "education":0.15, 
            "courses":0.10,
            "skills":0.20,  
            "languages":0.10,
            "additional":0.10
        }
        # generate_report –ø–æ–∫–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç PDF –≤–∞–∫–∞–Ω—Å–∏–∏, –Ω–æ –º–æ–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å
        
        report = generate_report(
            vacancy_md=vacancy_md,
            resume_pdfs=resume_paths,
            mai_weights=mai_weights,
            alpha=0.5
        )

        lines = ["üîç –†–µ–π—Ç–∏–Ω–≥ —Ä–µ–∑—é–º–µ:"]

        for item in report:
            name = item["name"]
            pct  = item["score"] * 100
            issues = item.get("ontologyIssues", [])
            
            if not issues:
                # –Ω–µ—Ç –Ω–∞—Ä—É—à–µ–Ω–∏–π –æ–Ω—Ç–æ–ª–æ–≥–∏–∏
                mark = "‚úÖ"
                note = ""
            else:
                # –µ—Å—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏—è, –≤—ã–≤–æ–¥–∏–º warning –∏ –∫—Ä–∞—Ç–∫–æ –∏—Ö –æ–ø–∏—Å—ã–≤–∞–µ–º
                mark = "‚ö†Ô∏è"
                note = f" (–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {', '.join(issues)})"
            
            lines.append(f"{mark} {name}: {pct:.1f}%{note}")

        return await update.message.reply_text("\n".join(lines), reply_markup=MARKUP)


    # –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ
    await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É.", reply_markup=MARKUP)

# --- –ì—Ä—É–ø–ø–æ–≤–æ–π summary –¥–ª—è —Ä–µ–∑—é–º–µ ---
def send_group_summary(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    g = job.context
    ud = context.dispatcher.user_data[g['user_id']]
    files = ud.get('files', [])
    group_files = [
        f['file_name'] for f in files
        if f.get('media_group_id')==g['group_id']
    ]
    if group_files:
        context.bot.send_message(
            chat_id=g['chat_id'],
            text="‚úÖ –†–µ–∑—é–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: " + ", ".join(group_files),
            reply_markup=MARKUP
        )
    ud['media_groups'].pop(g['group_id'], None)

# --- –î–æ–∫—É–º–µ–Ω—Ç (PDF / DOCX) & –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ —Ä–µ–∑—é–º–µ ---
async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    expect = (context.user_data.get('expect') or '').lower()
    msg = update.message
    doc = msg.document

    context.user_data.setdefault('files', [])
    context.user_data.setdefault('media_groups', {})

    os.makedirs("downloads", exist_ok=True)
    fp = os.path.join("downloads", f"{msg.from_user.id}_{doc.file_name}")
    
    file = await context.bot.get_file(doc.file_id)
    await file.download_to_drive(fp)

    entry = {
        "file_id": doc.file_id,
        "file_name": doc.file_name,
        "type": expect,
        "file_path": fp,
        "media_group_id": msg.media_group_id
    }
    context.user_data['files'].append(entry)

    # –≤–∞–∫–∞–Ω—Å–∏—è
    if expect=='vacancy':
        ext = doc.file_name.lower().rsplit(".",1)[-1]
        if ext=="pdf":
            md = pdf_to_markdown_str(fp)
            context.user_data['vacancy_md']=md
            await update.message.reply_text("‚úÖ PDF –≤–∞–∫–∞–Ω—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", reply_markup=MARKUP)
        elif ext in ("doc","docx"):
            md = docx_to_markdown(fp)
            context.user_data['vacancy_md']=md
            await update.message.reply_text("‚úÖ DOCX –≤–∞–∫–∞–Ω—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω.", reply_markup=MARKUP)
        else:
            await update.message.reply_text("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç.", reply_markup=MARKUP)
        context.user_data['expect']=None
        return

    # —Ä–µ–∑—é–º–µ
    if expect=='resume':
        gid = msg.media_group_id
        if gid:
            context.user_data['media_groups'].setdefault(gid, []).append(entry)
            await update.message.reply_text("‚úÖ –†–µ–∑—é–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.", reply_markup=MARKUP)
        else:
            await update.message.reply_text("‚úÖ –†–µ–∑—é–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.", reply_markup=MARKUP)
            context.user_data['expect']=None
        return

    # –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ
    await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É.", reply_markup=MARKUP)
    context.user_data['expect']=None

# --- –ü–æ–∫–∞–∑–∞—Ç—å / –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª ---
async def callback_query_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    action, idx = query.data.split("|")
    idx = int(idx)
    files = context.user_data.get('files', [])
    if action=="SHOW" and 0<=idx<len(files):
        f=files[idx]
        await context.bot.send_document(query.message.chat.id, f['file_id'], filename=f['file_name'])
    if action=="DEL" and 0<=idx<len(files):
        rem=files.pop(idx)
        try: os.remove(rem['file_path'])
        except: pass
        await context.bot.send_message(query.message.chat.id, f"üóëÔ∏è –£–¥–∞–ª—ë–Ω {rem['file_name']}")
    await query.answer()

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.Regex(r'^(üìÑ|üìù|üìä|üìÇ)'), handle_text_input), group=0)
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    app.add_handler(MessageHandler(filters.Regex(r'^(üìÑ|üìù|üìä|üìÇ)'), handle_text))
    app.add_handler(CallbackQueryHandler(callback_query_handler, pattern=r'^(SHOW|DEL)\|\d+$'))

    app.run_polling()
    logger.info("Bot started")

if __name__=="__main__":
    main()